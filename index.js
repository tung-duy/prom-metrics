"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.startMetrics=exports.metrics=exports.httpRequestDurationMicroseconds=exports.endMetrics=exports.databaseResponseTimeHistogram=exports.checkoutsTotal=void 0;var _express=_interopRequireDefault(require("express"));var _promClient=_interopRequireDefault(require("prom-client"));var _responseTime=_interopRequireDefault(require("response-time"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const router=_express.default.Router();const httpRequestDurationMicroseconds=new _promClient.default.Histogram({name:"http_request_duration_seconds",help:"REST API response time in seconds",labelNames:["method","route","status_code"],buckets:[.1,5,15,50,100,200,300,400,500]});exports.httpRequestDurationMicroseconds=httpRequestDurationMicroseconds;const databaseResponseTimeHistogram=new _promClient.default.Histogram({name:"db_response_time_duration_seconds",help:"Database response time in seconds",labelNames:["operation","success"],buckets:[.1,5,15,50,100,200,300,400,500]});exports.databaseResponseTimeHistogram=databaseResponseTimeHistogram;function startMetricsServer(app){const collectDefaultMetrics=_promClient.default.collectDefaultMetrics;collectDefaultMetrics({app:"pos-landing-backend",prefix:"pos_",timeout:1e4,gcDurationBuckets:[.001,.01,.1,1,2,5]});app.get("/api/v1/metrics",async(req,res)=>{res.set("Content-Type",_promClient.default.register.contentType);return res.send(await _promClient.default.register.metrics())});app.use((0,_responseTime.default)((req,res,time)=>{httpRequestDurationMicroseconds.observe({method:req.method,route:req.originalUrl,status_code:res.statusCode},time*1e3)}))}startMetricsServer(router);const startMetrics=(req,res,next)=>{res.locals.startEpoch=Date.now();next()};exports.startMetrics=startMetrics;const endMetrics=(req,res,next)=>{const responseTimeInMs=Date.now()-res.locals.startEpoch;httpRequestDurationMicroseconds.labels(req.method,req.route?.path,res.statusCode).observe(responseTimeInMs);next()};exports.endMetrics=endMetrics;const checkoutsTotal=new _promClient.default.Counter({name:"checkouts_total",help:"Total number of checkouts",labelNames:["payment_method"]});exports.checkoutsTotal=checkoutsTotal;const metrics=router;exports.metrics=metrics;